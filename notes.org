* Notes
I started this lab with these commands:
#+begin_src bash
bundle install
rails db:migrate db:seed
rails s
#+end_src

I then ran the following within a new terminal:
#+begin_src bash
npm install --prefix client
npm start --prefix client
#+end_src

I then visited the 'http://localhost:4000' URL in a browser, and confirmed that the frontend application, 'Flockbuster', was running, and that the list of movies was current.

I then visited the 'http://localhost:4000/new' URL in a separate Chrome browser tab, and tried to click 'Submit' for a movie I didn't fill out any information for.

I then checked the Developer console, and noticed the '404' error produced:
#+begin_src bash
MovieForm.js:19          POST http://localhost:4000/movies 404 (Not Found)
#+end_src

I then went to the 'Network' tab in the Chrome Developer tools, and clicked 'movies' > Headers and noticed the following output:
#+begin_src bash
Request URL: http://localhost:4000/movies
Request Method: POST
Status Code: 404 Not Found
Remote Address: 127.0.0.1:4000
Referrer Policy: strict-origin-when-cross-origin
#+end_src

I then clicked 'Preview' in that same section and observed the following:
#+begin_src bash
{status: 404, error: "Not Found",…}
error
:
"Not Found"
exception
:
"#<ActionController::RoutingError: No route matches [POST] \"/movies\">"
status
:
404
traces
:
{Application Trace: [],…}
Application Trace
:
[]
Framework Trace
:
[{exception_object_id: 6960, id: 0,…}, {exception_object_id: 6960, id: 1,…},…]
0
:
{exception_object_id: 6960, id: 0,…}
1
:
{exception_object_id: 6960, id: 1,…}
2
:
{exception_object_id: 6960, id: 2,…}
3
:
{exception_object_id: 6960, id: 3,…}
4
:
{exception_object_id: 6960, id: 4,…}
5
:
{exception_object_id: 6960, id: 5,…}
6
:
{exception_object_id: 6960, id: 6,…}
7
:
{exception_object_id: 6960, id: 7, trace: "railties (6.1.3.2) lib/rails/rack/logger.rb:26:in `call'"}
8
:
{exception_object_id: 6960, id: 8,…}
9
:
{exception_object_id: 6960, id: 9,…}
10
:
{exception_object_id: 6960, id: 10, trace: "rack (2.2.3) lib/rack/runtime.rb:22:in `call'"}
11
:
{exception_object_id: 6960, id: 11,…}
12
:
{exception_object_id: 6960, id: 12,…}
13
:
{exception_object_id: 6960, id: 13,…}
14
:
{exception_object_id: 6960, id: 14, trace: "rack (2.2.3) lib/rack/sendfile.rb:110:in `call'"}
15
:
{exception_object_id: 6960, id: 15,…}
16
:
{exception_object_id: 6960, id: 16, trace: "rack-cors (1.1.1) lib/rack/cors.rb:100:in `call'"}
17
:
{exception_object_id: 6960, id: 17, trace: "railties (6.1.3.2) lib/rails/engine.rb:539:in `call'"}
18
:
{exception_object_id: 6960, id: 18, trace: "puma (5.3.1) lib/puma/configuration.rb:249:in `call'"}
19
:
{exception_object_id: 6960, id: 19,…}
20
:
{exception_object_id: 6960, id: 20,…}
21
:
{exception_object_id: 6960, id: 21, trace: "puma (5.3.1) lib/puma/request.rb:75:in `handle_request'"}
22
:
{exception_object_id: 6960, id: 22, trace: "puma (5.3.1) lib/puma/server.rb:437:in `process_client'"}
23
:
{exception_object_id: 6960, id: 23,…}
Full Trace
:
[{exception_object_id: 6960, id: 0,…}, {exception_object_id: 6960, id: 1,…},…]
0
:
{exception_object_id: 6960, id: 0,…}
1
:
{exception_object_id: 6960, id: 1,…}
2
:
{exception_object_id: 6960, id: 2,…}
3
:
{exception_object_id: 6960, id: 3,…}
4
:
{exception_object_id: 6960, id: 4,…}
5
:
{exception_object_id: 6960, id: 5,…}
6
:
{exception_object_id: 6960, id: 6,…}
7
:
{exception_object_id: 6960, id: 7, trace: "railties (6.1.3.2) lib/rails/rack/logger.rb:26:in `call'"}
8
:
{exception_object_id: 6960, id: 8,…}
9
:
{exception_object_id: 6960, id: 9,…}
10
:
{exception_object_id: 6960, id: 10, trace: "rack (2.2.3) lib/rack/runtime.rb:22:in `call'"}
11
:
{exception_object_id: 6960, id: 11,…}
12
:
{exception_object_id: 6960, id: 12,…}
13
:
{exception_object_id: 6960, id: 13,…}
14
:
{exception_object_id: 6960, id: 14, trace: "rack (2.2.3) lib/rack/sendfile.rb:110:in `call'"}
15
:
{exception_object_id: 6960, id: 15,…}
16
:
{exception_object_id: 6960, id: 16, trace: "rack-cors (1.1.1) lib/rack/cors.rb:100:in `call'"}
17
:
{exception_object_id: 6960, id: 17, trace: "railties (6.1.3.2) lib/rails/engine.rb:539:in `call'"}
18
:
{exception_object_id: 6960, id: 18, trace: "puma (5.3.1) lib/puma/configuration.rb:249:in `call'"}
19
:
{exception_object_id: 6960, id: 19,…}
20
:
{exception_object_id: 6960, id: 20,…}
21
:
{exception_object_id: 6960, id: 21, trace: "puma (5.3.1) lib/puma/request.rb:75:in `handle_request'"}
22
:
{exception_object_id: 6960, id: 22, trace: "puma (5.3.1) lib/puma/server.rb:437:in `process_client'"}
23
:
{exception_object_id: 6960, id: 23,…}
#+end_src

I then went to the same terminal running the 'rails s' server, and observed the error in more detail:
#+begin_src bash
Started POST "/movies" for 127.0.0.1 at 2022-10-25 20:08:07 -0500

ActionController::RoutingError (No route matches [POST] "/movies"):
#+end_src

I then modified the 'config/routes.rb' to updated the existing ':movies' resource by adding the ':create' action within the 'only:' section accordingly:
#+begin_src ruby
Rails.application.routes.draw do
  resources :movies, only: [:index, :create]
end
#+end_src

I then modified the 'app/controllers/movies_controller.rb' Controller file to include the 'create' controller method:
#+begin_src ruby
class MoviesController < ApplicationController
  def create
  end

  def index
    movies = Movie.all
    render json: movies
  end

end
#+end_src

I then returned to the React frontend application, refreshed the page, and submitted another empty movie response, and received the following within the 'Network' tab for the 'movies' response:
#+begin_src bash
://localhost:4000/movies
Request Method: POST
Status Code: 204 No Content
Remote Address: 127.0.0.1:4000
Referrer Policy: strict-origin-when-cross-origin
#+end_src

I then observed that the main Chrome Developer tool's console had the following output:
#+begin_src bash
VM144:1 Uncaught (in promise) SyntaxError: Unexpected end of JSON input
    at MovieForm.js:19:1
#+end_src

The solution to this issue is that the 'create' controller method isn't actually returning the requested JSON formatted data, so the issue is in the 'create' Controller method itself.

With this in mind, the two basic solutions to the 'SyntaxError: Unexpected end of JSON input' error include the following two revisions:
- 1. Return JSON data in the response from your controller actions
- 2. Don't use the .json() method on the response if your controller does not respond with JSON data

I then revised the 'app/controllers/movies_controller.rb' Controller file with the following contents to include a 'byebug' debugger:
#+begin_src ruby
class MoviesController < ApplicationController
  def create
    byebug
  end

  def index
    movies = Movie.all
    render json: movies
  end

end
#+end_src

I then refreshed the React frontend application, and submitted an empty form again, and was immediately brought into the 'byebug' debugging console:
#+begin_src bash
(byebug) params
#<ActionController::Parameters {"title"=>"", "year"=>2022, "length"=>"0", "director"=>"", "description"=>"", "poster_url"=>"", "category"=>"", "discount"=>false, "female_director"=>false, "controller"=>"movies", "action"=>"create", "movie"=>{"title"=>"", "year"=>2022, "length"=>"0", "director"=>"", "description"=>"", "poster_url"=>"", "category"=>"", "discount"=>false, "female_director"=>false}} permitted: false>
#+end_src

This corresponds with the 'formData' state variable within the 'client/src/components/MovieForm.js' component.

With this in mind, I adjusted the 'create' method within the 'app/controllers/movies_controller.rb' Controllers file with the following contents:
#+begin_src ruby
class MoviesController < ApplicationController
  def create
    movie = Movie.create(movie_params)
    render json: movie, status: :created
  end

  def index
    movies = Movie.all
    render json: movies
  end

  private

  def movie_params
    params.permit(:title, :year, :length, :director, :description, :poster_url, :category, :discount, :female_director)
  end

end
#+end_src

I then observed the following 'POST' request in the logs:
#+begin_src ruby
Started POST "/movies" for 127.0.0.1 at 2022-10-25 20:29:56 -0500
   (0.7ms)  SELECT sqlite_version(*)
   (0.1ms)  SELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC
Processing by MoviesController#create as */*
  Parameters: {"title"=>"", "year"=>2022, "length"=>"0", "director"=>"", "description"=>"", "poster_url"=>"", "category"=>"", "discount"=>false, "female_director"=>false, "movie"=>{"title"=>"", "year"=>2022, "length"=>"0", "director"=>"", "description"=>"", "poster_url"=>"", "category"=>"", "discount"=>false, "female_director"=>false}}
Unpermitted parameter: :movie
  TRANSACTION (0.0ms)  begin transaction
  ↳ app/controllers/movies_controller.rb:3:in `create'
  Movie Create (0.5ms)  INSERT INTO "movies" ("title", "year", "length", "director", "description", "poster_url", "category", "discount", "female_director", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  [["title", ""], ["year", 2022], ["length", 0], ["director", ""], ["description", ""], ["poster_url", ""], ["category", ""], ["discount", 0], ["female_director", 0], ["created_at", "2022-10-26 01:29:56.994801"], ["updated_at", "2022-10-26 01:29:56.994801"]]
  ↳ app/controllers/movies_controller.rb:3:in `create'
  TRANSACTION (1.6ms)  commit transaction
  ↳ app/controllers/movies_controller.rb:3:in `create'
Completed 201 Created in 18ms (Views: 0.3ms | ActiveRecord: 2.9ms | Allocations: 10681)
#+end_src

I then deliberately modified the 'create' method in the 'app/controllers/movie_controllers.rb' Controller file again as per the lab to introduce a deliberate error that's commonly seen aka a typo that generates a '500' error:
#+begin_src ruby
class MoviesController < ApplicationController
  def create
    movie = Movi.create(movie_params)
    render json: movie, status: :created
  end

  def index
    movies = Movie.all
    render json: movies
  end

  private

  def movie_params
    params.permit(:title, :year, :length, :director, :description, :poster_url, :category, :discount, :female_director)
  end

end
#+end_src

This generated a '500' error in the Chrome Developer console:
#+begin_src bash
MovieForm.js:19          POST http://localhost:4000/movies 500 (Internal Server Error)
#+end_src

I then noticed the following error in the Ruby server logs:
#+begin_src bash
Completed 500 Internal Server Error in 1ms (ActiveRecord: 0.5ms | Allocations: 1606)

NameError (uninitialized constant MoviesController::Movi):

app/controllers/movies_controller.rb:3:in `create'
#+end_src

This error indicates where to look for the cause of the error itself:
- The error itself: NameError (uninitialized constant MoviesController::Movi), indicating that we're using a constant Movi incorrectly
- The file and line number of the error: app/controllers/movies_controller.rb:9:in 'create'

General Info For Errors:
- This is general information about what to do for certain errors:

When you see a 404 Not Found error:
- Check the Network Tab on the frontend
- Check the Rails Server logs in the backend
- Add a new route to handle the HTTP Verb + Path for this request

When you see an Unexpected end of JSON input error:
- Check your fetch request
- Check the controller action, and make sure to render json:

When you need to see data from the request in your controller:
- Add a byebug to your controller method
- Make a request from the browser
- Inspect params in the byebug session

When you see a 500 Internal Server Error error:
- Open your Rails server log
- Look for the last request that came through
- Find the error message and stack trace to identify where the error originated

Answers To Check For Understanding:
- Q1. In general, where does it make sense to look when debugging client errors (4XX HTTP Status codes)?
- Answer: For 400 series errors, check the 'Network' tab, check the 'Rails' server logs, and add a new route to handle the 'HTTP Verb' + path for the request
- Q2. In general, where does it make sense to look when debugging server errors (5XX HTTP status codes)?
- Answer: Check the 'Rails' server logs, look at the last request that came through, and find the error message with associated slack trace
- Q3. What causes the Unexpected end of JSON input error and how can we fix it?
- Answer: This might be a spelling error on the associated method in the related 'Controller' method, so check the fetch request, and check the controller method to make sure that json is rendered properly
